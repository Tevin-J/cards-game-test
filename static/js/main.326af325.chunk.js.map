{"version":3,"sources":["ui/common/button/Button.module.css","assets/audio/click.mp3","ui/gamePage/gameField/cards/card/Card.tsx","bll/reducer.ts","ui/gamePage/gameField/cards/card/CardContainer.tsx","ui/gamePage/gameField/cards/Cards.tsx","ui/gamePage/gameField/cards/CardsContainer.tsx","ui/gamePage/gameField/GameField.tsx","ui/gamePage/GamePage.tsx","ui/gamePage/GamePageContainer.tsx","ui/common/button/Button.tsx","ui/startPage/StartPage.tsx","ui/startPage/StartPageContainer.tsx","ui/victoryPage/VictoryPage.tsx","ui/victoryPage/VictoryPageContainer.tsx","ui/App.tsx","serviceWorker.ts","bll/store.ts","index.tsx","ui/gamePage/gameField/cards/card/Card.module.css","ui/gamePage/gameField/cards/Cards.module.css","ui/startPage/StartPage.module.css","ui/victoryPage/VictoryPage.module.css","assets/img/cactus.svg","assets/img/cupcake.svg","assets/img/hat.svg","assets/img/hotDog.svg","assets/img/quentao.svg","assets/img/scarecrow.svg","assets/img/sunflower.svg","assets/img/braid.svg","ui/gamePage/GamePage.module.css"],"names":["module","exports","Card","props","classForCard","card","isOpen","styles","openedCard","className","onClick","openCard","src","img","alt","title","isShow","showedCard","closedCard","initialState","cards","id","pic_1","pic_4","pic_3","pic_7","pic_6","pic_8","pic_5","pic_2","counter","isLoading","actions","type","reducer","state","action","newCardsArr","map","c","showedCards","filter","newCards","counterValue","shuffledArr","shuffle","array","i","length","j","Math","floor","random","clickSound","require","CardContainer","dispatch","useDispatch","Audio","play","getState","showCards","setTimeout","Cards","cardsElements","key","classForCards","loading","CardsContainer","useSelector","store","every","to","GameField","gameField","GamePage","gamePage","GamePageContainer","Button","path","buttonWrapper","text","StartPage","pageWrapper","rules","onStartClick","StartPageContainer","VictoryPage","onButtonClick","onRestartClick","congrats","score","VictoryPageContainer","App","exact","render","Boolean","window","location","hostname","match","rootReducer","combineReducers","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.326af325.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWrapper\":\"Button_buttonWrapper__188Pb\"};","module.exports = __webpack_public_path__ + \"static/media/click.4f5263e9.mp3\";","import React from \"react\";\r\nimport styles from './Card.module.css'\r\nimport {CardType} from \"../../../../../bll/reducer\";\r\n\r\ntype PropsType = {\r\n    card: CardType\r\n    openCard: () => void\r\n}\r\n\r\nconst Card: React.FC<PropsType> = (props) => {\r\n\r\n    /*setting css styles for card depending on isOpen prop*/\r\n    const classForCard = props.card.isOpen ? `${styles.openedCard} ${styles.card}` : styles.card\r\n\r\n    return (\r\n        <div className={classForCard} onClick={props.openCard}>\r\n            <img src={props.card.img} alt={props.card.title} className={props.card.isShow ? styles.showedCard : styles.closedCard}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Card","import pic_1 from '../assets/img/cactus.svg'\r\nimport pic_2 from '../assets/img/cupcake.svg'\r\nimport pic_3 from '../assets/img/hat.svg'\r\nimport pic_4 from '../assets/img/hotDog.svg'\r\nimport pic_5 from '../assets/img/quentao.svg'\r\nimport pic_6 from '../assets/img/scarecrow.svg'\r\nimport pic_7 from '../assets/img/sunflower.svg'\r\nimport pic_8 from '../assets/img/braid.svg'\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\n\r\n\r\nexport type CardType = {\r\n    id: number\r\n    title: string\r\n    img: string\r\n    isShow: boolean\r\n    isOpen: boolean\r\n}\r\ntype InitialStateType = {\r\n    cards: Array<CardType>\r\n    counter: number\r\n    isLoading: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    cards: [\r\n        {id: 0, title: 'pic_1', img: pic_1, isShow: false, isOpen: false},\r\n        {id: 1, title: 'pic_4', img: pic_4, isShow: false, isOpen: false},\r\n        {id: 2, title: 'pic_3', img: pic_3, isShow: false, isOpen: false},\r\n        {id: 3, title: 'pic_7', img: pic_7, isShow: false, isOpen: false},\r\n        {id: 4, title: 'pic_6', img: pic_6, isShow: false, isOpen: false},\r\n        {id: 5, title: 'pic_8', img: pic_8, isShow: false, isOpen: false},\r\n        {id: 6, title: 'pic_1', img: pic_1, isShow: false, isOpen: false},\r\n        {id: 7, title: 'pic_5', img: pic_5, isShow: false, isOpen: false},\r\n        {id: 8, title: 'pic_2', img: pic_2, isShow: false, isOpen: false},\r\n        {id: 9, title: 'pic_8', img: pic_8, isShow: false, isOpen: false},\r\n        {id: 10, title: 'pic_4', img: pic_4, isShow: false, isOpen: false},\r\n        {id: 11, title: 'pic_6', img: pic_6, isShow: false, isOpen: false},\r\n        {id: 12, title: 'pic_7', img: pic_7, isShow: false, isOpen: false},\r\n        {id: 13, title: 'pic_2', img: pic_2, isShow: false, isOpen: false},\r\n        {id: 14, title: 'pic_5', img: pic_5, isShow: false, isOpen: false},\r\n        {id: 15, title: 'pic_3', img: pic_3, isShow: false, isOpen: false},\r\n    ],\r\n    counter: 0,\r\n    isLoading: false\r\n}\r\n\r\nconst reducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"App/Reducer/TOGGLE_IS_SHOW\":\r\n            let newCardsArr: Array<CardType> = [...state.cards]\r\n            if (!action.card.isOpen) {\r\n                newCardsArr = newCardsArr.map(c => {\r\n                    if (c.id === action.card.id) {\r\n                        return {...c, isShow: true}\r\n                    } else {\r\n                        return c\r\n                    }\r\n                })\r\n                return {\r\n                    ...state,\r\n                    cards: newCardsArr\r\n                }\r\n            } else {\r\n                return state\r\n            }\r\n        case \"App/Reducer/COMPARE_CARDS\":\r\n            let showedCards = state.cards.filter(c => c.isShow)\r\n            let newCards: Array<CardType> = [...state.cards]\r\n            let counterValue: number = state.counter\r\n            if (showedCards[0].title === showedCards[1].title && showedCards[0].id !== showedCards[1].id) {\r\n                counterValue = counterValue + 1\r\n                newCards = newCards.map(c => {\r\n                    if (c.id === showedCards[0].id || c.id === showedCards[1].id) {\r\n                        return {...c, isOpen: true, isShow: false}\r\n                    } else {\r\n                        return c\r\n                    }\r\n                })\r\n            } else {\r\n                counterValue = counterValue + 1\r\n                newCards = newCards.map(c => {\r\n                    return {...c, isShow: false}\r\n                })\r\n            }\r\n            return {\r\n                ...state,\r\n                cards: newCards,\r\n                counter: counterValue\r\n            }\r\n        case 'App/Reducer/TOGGLE_IS_LOADING':\r\n            return {\r\n                ...state,\r\n                isLoading: !state.isLoading\r\n            }\r\n        case 'App/Reducer/VICTORY_TOGGLING':\r\n            return {\r\n                ...state,\r\n                cards: state.cards.map(c => {\r\n                    return {\r\n                        ...c,\r\n                        isShow: false,\r\n                        isOpen: false\r\n                    }\r\n                }),\r\n                counter: 0\r\n            }\r\n        case 'App/Reducer/SHUFFLING_CARDS':\r\n            let shuffledArr: Array<CardType> = [...state.cards]\r\n            let shuffle = (array: Array<CardType>): void => {\r\n                for (let i = array.length - 1; i > 0; i--) {\r\n                    let j = Math.floor(Math.random() * (i + 1));\r\n                    [array[i], array[j]] = [array[j], array[i]];\r\n                }\r\n            }\r\n            shuffle(shuffledArr)\r\n            return {\r\n                ...state,\r\n                cards: shuffledArr\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n/*actions*/\r\nexport const actions = {\r\n    toggleIsShow: (card: CardType) => ({type: 'App/Reducer/TOGGLE_IS_SHOW', card} as const),\r\n    compareCards: () => ({type: 'App/Reducer/COMPARE_CARDS'} as const),\r\n    toggleIsLoading: () => ({type: 'App/Reducer/TOGGLE_IS_LOADING'} as const),\r\n    victoryToggling: () => ({type: 'App/Reducer/VICTORY_TOGGLING'} as const),\r\n    shufflingCards: () => ({type: 'App/Reducer/SHUFFLING_CARDS'} as const)\r\n}\r\ntype ActionType = InferActionTypes<typeof actions>\r\n\r\n/*thunks*/\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\n\r\nexport const showCard = (card: CardType): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppStateType, unknown, ActionType>,\r\n            getState: () => AppStateType) => {\r\n\r\n        /*getting cards array from state and filtering cards with prop isShow===true*/\r\n        const state = getState()\r\n        const {cards} = state.reducer\r\n        let showCards = cards.filter(c => c.isShow)\r\n\r\n        /*show the active card if it has not been shown or clicked*/\r\n        if (!card.isOpen && !card.isShow) {\r\n            dispatch(actions.toggleIsShow(card))\r\n        }\r\n\r\n        /*compare two cards if the first card is showed and second is not showed and guessed*/\r\n        if (showCards.length !== 0 && !card.isOpen && !card.isShow) {\r\n            /*prevent click on any card while comparing is going on*/\r\n            dispatch(actions.toggleIsLoading())\r\n            /*after 1 sec delay comparing starts*/\r\n            setTimeout(() => {\r\n                dispatch(actions.compareCards())\r\n                dispatch(actions.toggleIsLoading())\r\n            }, 1000)\r\n        }\r\n    };\r\n};\r\n\r\nexport default reducer","import Card from \"./Card\";\r\nimport {CardType, showCard} from \"../../../../../bll/reducer\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nconst clickSound = require('../../../../../assets/audio/click.mp3')\r\n\r\ntype PropsType = {\r\n    card: CardType\r\n}\r\n\r\nconst CardContainer: React.FC<PropsType> = (props) => {\r\n\r\n    /*dispatch showCard action to show the clicked card*/\r\n    const dispatch = useDispatch()\r\n    const openCard = () => {\r\n        /*making card click sound*/\r\n        new Audio(clickSound).play()\r\n        dispatch(showCard(props.card))\r\n    }\r\n\r\n    return (\r\n        <Card card={props.card} openCard={openCard}/>\r\n    )\r\n}\r\nexport default CardContainer","import React from \"react\";\r\nimport styles from './Cards.module.css'\r\nimport {CardType} from \"../../../../bll/reducer\";\r\nimport CardContainer from \"./card/CardContainer\";\r\n\r\ntype PropsType = {\r\n    cards: Array<CardType>\r\n    isLoading: boolean\r\n}\r\n\r\nconst Cards: React.FC<PropsType> = (props) => {\r\n\r\n    /*mapping card components from array of cards*/\r\n    const cardsElements = props.cards.map(c => <CardContainer key={c.id} card={c}/>)\r\n\r\n    /*setting css styles for cards depending on isLoading prop*/\r\n    const classForCards = props.isLoading ? `${styles.loading} ${styles.cards}` : styles.cards\r\n\r\n    return (\r\n        <div className={classForCards}>\r\n            {cardsElements}\r\n        </div>\r\n    )\r\n}\r\nexport default Cards","import Cards from \"./Cards\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../bll/store\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nconst CardsContainer: React.FC = () => {\r\n\r\n    const {cards, isLoading} = useSelector((store: AppStateType) => store.reducer)\r\n\r\n    /*redirect to victory page if all cards has opened */\r\n    if (cards.every(c => c.isOpen)) {\r\n        return <Redirect to={'/victory/'}/>\r\n    }\r\n\r\n    return (\r\n        <Cards cards={cards} isLoading={isLoading}/>\r\n    )\r\n}\r\nexport default CardsContainer","import React from \"react\";\r\nimport CardsContainer from \"./cards/CardsContainer\";\r\nimport styles from './GameField.module.css'\r\n\r\nconst GameField: React.FC = () => {\r\n    return (\r\n        <div className={styles.gameField}>\r\n            <CardsContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default GameField","import GameField from \"./gameField/GameField\";\r\nimport React from \"react\";\r\nimport styles from './GamePage.module.css'\r\n\r\ntype PropsType = {\r\n    counter: number\r\n}\r\n\r\nconst GamePage: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={styles.gamePage}>\r\n            <GameField/>\r\n            <div className={styles.counter}>\r\n                {props.counter}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default GamePage","import GamePage from \"./GamePage\";\r\nimport React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../bll/store\";\r\n\r\nconst GamePageContainer: React.FC = () => {\r\n\r\n    const {counter} = useSelector((store: AppStateType) => store.reducer)\r\n\r\n    return (\r\n        <GamePage counter={counter}/>\r\n    )\r\n}\r\nexport default GamePageContainer","import React from \"react\"\r\nimport styles from \"./Button.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype OwnPropsType = {\r\n    path: string\r\n    onClick: () => void\r\n    text: string\r\n}\r\ntype PropsType = OwnPropsType\r\n\r\nconst Button: React.FC<PropsType> = (props) => {\r\n\r\n    const onButtonClick = () => {\r\n        props.onClick()\r\n    }\r\n\r\n    return (\r\n        <NavLink to={props.path} className={styles.buttonWrapper}>\r\n            <p onClick={onButtonClick}>\r\n                {props.text}\r\n            </p>\r\n        </NavLink>\r\n    )\r\n}\r\nexport default Button","import React from \"react\";\r\nimport styles from './StartPage.module.css'\r\nimport Button from \"../common/button/Button\";\r\n\r\ntype PropsType = {\r\n    onStartClick: () => void\r\n}\r\n\r\nconst StartPage: React.FC<PropsType> = (props) => {\r\n\r\n   const onButtonClick = () => {\r\n       props.onStartClick()\r\n   }\r\n\r\n    return (\r\n        <div className={styles.pageWrapper}>\r\n            <div className={styles.title}>\r\n                FIND A PAIR\r\n            </div>\r\n            <div className={styles.rules}>\r\n                Try to find all pairs of cards opening one by one.\r\n            </div>\r\n            <Button path={'/game/'} onClick={onButtonClick} text={'START'}/>\r\n        </div>\r\n    )\r\n}\r\nexport default StartPage","import React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {actions} from \"../../bll/reducer\";\r\nimport StartPage from \"./StartPage\";\r\n\r\nconst StartPageContainer: React.FC = () => {\r\n\r\n    /*uses useDispatch hook to have an ability to dispatch actions*/\r\n    const dispatch = useDispatch()\r\n\r\n    const onStartClick = () => {\r\n        dispatch(actions.shufflingCards())\r\n    }\r\n    return (\r\n        <StartPage onStartClick={onStartClick}/>\r\n    )\r\n}\r\nexport default StartPageContainer","import React from \"react\";\r\nimport styles from './VictoryPage.module.css'\r\nimport Button from \"../common/button/Button\";\r\n\r\ntype PropsType = {\r\n    score: number\r\n    onRestartClick: () => void\r\n}\r\n\r\nconst VictoryPage: React.FC<PropsType> = (props) => {\r\n\r\n    const onButtonClick = () => {\r\n        props.onRestartClick()\r\n    }\r\n\r\n    return (\r\n        <div className={styles.pageWrapper}>\r\n            <div className={styles.congrats}>\r\n                You won!\r\n            </div>\r\n            <div className={styles.score}>\r\n                Your score is {props.score}.\r\n            </div>\r\n            <Button path={'/game/'} onClick={onButtonClick} text={'RESTART'}/>\r\n            <Button path={'/'} onClick={onButtonClick} text={'MAIN PAGE'}/>\r\n        </div>\r\n    )\r\n}\r\nexport default VictoryPage","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {actions} from \"../../bll/reducer\";\r\nimport {AppStateType} from \"../../bll/store\";\r\nimport VictoryPage from \"./VictoryPage\";\r\n\r\nconst VictoryPageContainer: React.FC = () => {\r\n\r\n    /*getting the counter value from the state via useSelector hook*/\r\n    const {counter} = useSelector((state: AppStateType) => state.reducer)\r\n    /*counting the final score of the game*/\r\n    let score = 108 - counter\r\n\r\n    const dispatch = useDispatch()\r\n    /*setting cards to initial state and shuffling array of cards*/\r\n    const onRestartClick = () => {\r\n        dispatch(actions.victoryToggling())\r\n        dispatch(actions.shufflingCards())\r\n    }\r\n\r\n    return (\r\n        <VictoryPage score={score} onRestartClick={onRestartClick}/>\r\n    )\r\n}\r\nexport default VictoryPageContainer","import React from 'react';\nimport './App.css';\nimport GamePageContainer from \"./gamePage/GamePageContainer\";\nimport { Switch, Route } from 'react-router-dom';\nimport StartPageContainer from \"./startPage/StartPageContainer\";\nimport VictoryPageContainer from \"./victoryPage/VictoryPageContainer\";\n\nconst App: React.FC = () => {\n\n    return (\n        <div className=\"App\">\n            <Switch>\n                <Route path={'/'} exact render={() => <StartPageContainer/>}/>\n                <Route path={'/game/'} render={() => <GamePageContainer/>}/>\n                <Route path={'/victory/'} render={() => <VictoryPageContainer/>}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    reducer: reducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionTypes<T extends {[key: string]: (...args:any)=> any}> = ReturnType<PropertiesType<T>>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport default store\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./bll/store\";\nimport {HashRouter} from \"react-router-dom\";\nimport 'react-app-polyfill/ie9'\nimport 'core-js/es/set'\nimport 'core-js/es/map'\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1BGjC\",\"showedCard\":\"Card_showedCard__ZkwFI\",\"closedCard\":\"Card_closedCard__2r3uz\",\"openedCard\":\"Card_openedCard__3fr--\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__3K88L\",\"loading\":\"Cards_loading__1mlbL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrapper\":\"StartPage_pageWrapper__rBSZo\",\"title\":\"StartPage_title__20hWX index_largeText__oMEuR\",\"rules\":\"StartPage_rules__3Yske index_smallText__2SBTM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrapper\":\"VictoryPage_pageWrapper__2x2bo\",\"congrats\":\"VictoryPage_congrats__1CgI7 index_largeText__oMEuR\",\"score\":\"VictoryPage_score__Xm0R6 index_smallText__2SBTM\"};","module.exports = __webpack_public_path__ + \"static/media/cactus.2667d78b.svg\";","module.exports = __webpack_public_path__ + \"static/media/cupcake.d4c8b5e9.svg\";","module.exports = __webpack_public_path__ + \"static/media/hat.7e2f2138.svg\";","module.exports = __webpack_public_path__ + \"static/media/hotDog.75bf2c2d.svg\";","module.exports = __webpack_public_path__ + \"static/media/quentao.6c67018b.svg\";","module.exports = __webpack_public_path__ + \"static/media/scarecrow.118acedf.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunflower.2a0c4222.svg\";","module.exports = __webpack_public_path__ + \"static/media/braid.7cba9949.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gamePage\":\"GamePage_gamePage__1RaQV\",\"counter\":\"GamePage_counter__1Celc index_smallText__2SBTM\"};"],"sourceRoot":""}